# -*- coding: utf-8 -*-
"""
Created on Mon Jun 26 06:04:09 2023

@author: JF
"""

# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestYuihuang():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    print("Error")
    # self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_yuihuang(self):
    # Test name: yuihuang
    # Step # | name | target | value
    # 1 | open | https://yuihuang.com/apcs/ | 
    self.driver.get("https://yuihuang.com/apcs/")
    # 2 | setWindowSize | 968x1020 | 
    self.driver.set_window_size(968, 1020)
    # 3 | click | linkText=路徑偵測 | 
    self.vars["window_handles"] = self.driver.window_handles
    # 4 | storeWindowHandle | root | 
    self.driver.find_element(By.LINK_TEXT, "路徑偵測").click()
    # 強制等待1秒
    time.sleep(1)
    # 關閉標籤頁(使用ctrl+w快速鍵)(失敗)
    # ActionChains(self.driver).key_down(Keys.CONTROL).send_keys("w").key_up(Keys.CONTROL).perform()
    # 關閉標籤頁(先切換到第二個畫面再關閉)
    self.driver.switch_to.window(self.driver.window_handles[1])
    self.driver.close()
    time.sleep(1)
    self.driver.switch_to.window(self.driver.window_handles[0])
    self.driver.close()
    
    
    # # 5 | selectWindow | handle=${win2629} | 
    # self.vars["win2629"] = self.wait_for_window(2000)
    # # 6 | close |  | 
    # self.vars["root"] = self.driver.current_window_handle
    # # 7 | selectWindow | handle=${root} | 
    # self.driver.switch_to.window(self.vars["win2629"])
    # # 8 | click | linkText=特殊位置 | 
    # self.driver.close()
    # # 9 | selectWindow | handle=${win325} | 
    # self.driver.switch_to.window(self.vars["root"])
    # # 10 | close |  | 
    # self.vars["window_handles"] = self.driver.window_handles
    # # 11 | selectWindow | handle=${root} | 
    # self.driver.find_element(By.LINK_TEXT, "特殊位置").click()
    # self.vars["win325"] = self.wait_for_window(2000)
    # self.driver.switch_to.window(self.vars["win325"])
    # self.driver.close()
    # self.driver.switch_to.window(self.vars["root"])
  
